//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System.Data.EntityClient;
using System.Data.Objects;
using ActivityMonitor.ReportingEntitiesMockObjectSet;
using System.Diagnostics;

namespace ActivityMonitor
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class ReportingEntitiesMock : IReportingEntities
    {
        public IObjectSet<tbDailyActivityGP> tbDailyActivityGP
        {
            get { return _tbDailyActivityGP  ?? (_tbDailyActivityGP = new MockObjectSet<tbDailyActivityGP>()); }
        }
        private IObjectSet<tbDailyActivityGP> _tbDailyActivityGP;
        public IObjectSet<tbHealthBoardContacts> tbHealthBoardContacts
        {
            get { return _tbHealthBoardContacts  ?? (_tbHealthBoardContacts = new MockObjectSet<tbHealthBoardContacts>()); }
        }
        private IObjectSet<tbHealthBoardContacts> _tbHealthBoardContacts;
        public IObjectSet<tbInactiveSites> tbInactiveSites
        {
            get { return _tbInactiveSites  ?? (_tbInactiveSites = new MockObjectSet<tbInactiveSites>()); }
        }
        private IObjectSet<tbInactiveSites> _tbInactiveSites;
        public IObjectSet<tbMsg> tbMsg
        {
            get { return _tbMsg  ?? (_tbMsg = new MockObjectSet<tbMsg>()); }
        }
        private IObjectSet<tbMsg> _tbMsg;
        public IObjectSet<tbOrganisation> tbOrganisation
        {
            get { return _tbOrganisation  ?? (_tbOrganisation = new MockObjectSet<tbOrganisation>()); }
        }
        private IObjectSet<tbOrganisation> _tbOrganisation;
        public IObjectSet<tbOrgSupplier> tbOrgSupplier
        {
            get { return _tbOrgSupplier  ?? (_tbOrgSupplier = new MockObjectSet<tbOrgSupplier>()); }
        }
        private IObjectSet<tbOrgSupplier> _tbOrgSupplier;
        public IObjectSet<tbSupplierContacts> tbSupplierContacts
        {
            get { return _tbSupplierContacts  ?? (_tbSupplierContacts = new MockObjectSet<tbSupplierContacts>()); }
        }
        private IObjectSet<tbSupplierContacts> _tbSupplierContacts;
        public IObjectSet<tbMigratingSites> tbMigratingSites
        {
            get { return _tbMigratingSites  ?? (_tbMigratingSites = new MockObjectSet<tbMigratingSites>()); }
        }
        private IObjectSet<tbMigratingSites> _tbMigratingSites;

        public int SaveChanges() { return 0; }   // Had to implement this myself, not sure if it will work....
        public void DeleteObject(object entity)
        {
            // Grab the name of the calling method and action as appropriate

            StackTrace stackTrace = new StackTrace();
            string callingMethod = stackTrace.GetFrame(1).GetMethod().Name;

            if (callingMethod == "MarkOrganisationAsActive")
            {
                tbInactiveSites _organisation = (tbInactiveSites)entity;
                this.tbInactiveSites.DeleteObject(_organisation);
            }
            else if (callingMethod == "RemoveMigratingSite")
            {
                tbMigratingSites _organisation = (tbMigratingSites)entity;
                this.tbMigratingSites.DeleteObject(_organisation);
            }
        }  
    }
}
